#include <Arduino.h>
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>

// WiFi credentials - replace with your network details
const char* ssid = "pumkinpatch2";
const char* password = "Thisisridiculous!";

// Web server running on port 80
AsyncWebServer server(80);
bool clientConnected = false;

// OV7670 Camera Configuration
#define OV7670_ADDR 0x42
#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 64  // OLED display height, in pixels

// Pin definitions (as per your connection table)
#define SIOD 21  // SDA
#define SIOC 22  // SCL
#define VSYNC 34 // VS
#define HREF 35  // HS
#define PCLK 33
#define XCLK 32  // MCLK
#define D0 27
#define D1 17
#define D2 16
#define D3 15
#define D4 14
#define D5 13
#define D6 12
#define D7 4

// Image buffer - QQVGA (160x120)
#define IMG_WIDTH 640 
#define IMG_HEIGHT 480
#define BYTES_PER_PIXEL 2
#define BUFFER_SIZE (IMG_WIDTH * BYTES_PER_PIXEL)  // One line at a time
uint8_t lineBuffer[BUFFER_SIZE];
uint8_t frameBuffer[IMG_WIDTH * IMG_HEIGHT / 4]; // Downsampled grayscale

// For Debugging: Display captured image on Serial
#define DISPLAY_WIDTH 80
#define DISPLAY_HEIGHT 60
#define DOWNSAMPLE_FACTOR 2  // Downsample from 160x120 to 80x60

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// OV7670 register addresses
#define REG_CLKRC 0x11    // Clock control
#define REG_COM7 0x12     // Control 7
#define REG_COM10 0x15    // Control 10
#define REG_COM3 0x0C     // Control 3
#define REG_COM14 0x3E    // Control 14
#define REG_SCALING_XSC 0x70  // Test pattern and horizontal scaling
#define REG_SCALING_YSC 0x71  // Test pattern and vertical scaling
#define REG_SCALING_DCWCTR 0x72  // DCW control
#define REG_SCALING_PCLK_DIV 0x73  // Clock divider
#define REG_SCALING_PCLK_DELAY 0xA2  // Pixel clock delay

// Continuous streaming control
bool streamingActive = false;
unsigned long lastFrameTime = 0;
#define FRAME_INTERVAL 30  // Minimum time between frames (ms)

// Function declarations
void initCamera();
bool writeRegister(uint8_t reg, uint8_t value);
uint8_t readRegister(uint8_t reg);
void captureFrame();
void processAndDisplayFrame();
void setupWebServer();
String generateHtmlPage();
String generateFrameData();
void displaySerialImage();

void initCamera() {
  Serial.println("Initializing OV7670 camera...");
  
  // Reset all registers
  writeRegister(REG_COM7, 0x80);
  delay(100);
  
  // Try twice to initialize the camera with different clock speeds
  if (!writeRegister(REG_COM7, 0x00)) {  // YUV mode
    Serial.println("Trying lower clock speed...");
    // Reduce XCLK frequency
    ledcSetup(0, 4000000, 2); // Try 4MHz
    delay(100);
    writeRegister(REG_COM7, 0x00);
  }
  
  writeRegister(REG_COM3, 0x04);  // DCW enable
  
  // Set QVGA resolution (320x240)
  writeRegister(REG_COM7, 0x10);  // QVGA mode
  
  // Prescaler - Increase internal clock
  writeRegister(REG_CLKRC, 0x1);  // Clock scale: input / (val+1)
  
  // Enable scaling
  writeRegister(REG_COM3, 0x08);  // Enable scaling
  writeRegister(REG_COM14, 0x19); // Scaling PCLK and manual scaling enable
  writeRegister(REG_SCALING_XSC, 0x3A); // Horizontal scale factor
  writeRegister(REG_SCALING_YSC, 0x35); // Vertical scale factor
  writeRegister(REG_SCALING_DCWCTR, 0x22); // DCW - Downsample by 4
  writeRegister(REG_SCALING_PCLK_DIV, 0x02); // DSP scale control - PCLK divided by 4
  writeRegister(REG_SCALING_PCLK_DELAY, 0x02); // Pixel clock delay
  
  // Additional settings
  writeRegister(REG_COM10, 0x20); // VSYNC negative polarity
  
  // Read back a register to verify camera is responding
  uint8_t testVal = readRegister(REG_COM7);
  Serial.printf("COM7 register value: 0x%02X (should be 0x10)\n", testVal);
}

bool writeRegister(uint8_t reg, uint8_t value) {
  Wire.beginTransmission(OV7670_ADDR);
  Wire.write(reg);
  Wire.write(value);
  if (Wire.endTransmission() != 0) {
    Serial.printf("Failed to write to register 0x%02X\n", reg);
    return false;
  }
  delay(100);  // Small delay between I2C operations
  return true;
}

uint8_t readRegister(uint8_t reg) {
  uint8_t value = 0;
  
  Wire.beginTransmission(OV7670_ADDR);
  Wire.write(reg);
  if (Wire.endTransmission() != 0) {
    Serial.printf("Failed to write reg address 0x%02X for read\n", reg);
    return 0;
  }
  
  Wire.requestFrom(OV7670_ADDR, 1);
  if (Wire.available()) {
    value = Wire.read();
  }
  return value;
}

// Replace your captureFrame function with this optimized version

void captureFrame() {
  uint32_t frameStart = millis();
  bool lineStarted = false;
  int line = 0;
  int pixel = 0;
  
  // Wait for VSYNC with shorter timeout
  unsigned long startWait = millis();
  while (digitalRead(VSYNC) == 0 && millis() - startWait < 200);
  while (digitalRead(VSYNC) == 1 && millis() - startWait < 200);
  
  // Reset our frame buffer index
  memset(frameBuffer, 0, sizeof(frameBuffer));
  int bufferIndex = 0;
  
  // Pre-calculate GPIO bit positions for faster access
  const uint32_t D0_bit = (1ULL << D0);
  const uint32_t D1_bit = (1ULL << D1);
  const uint32_t D2_bit = (1ULL << D2);
  const uint32_t D3_bit = (1ULL << D3);
  const uint32_t D4_bit = (1ULL << D4);
  const uint32_t D5_bit = (1ULL << D5);
  const uint32_t D6_bit = (1ULL << D6);
  const uint32_t D7_bit = (1ULL << D7);
  
  // Capture frame with timeout
  unsigned long timeout = millis() + 500; // Shorter timeout
  
  while (line < IMG_HEIGHT && millis() < timeout) {
    // Wait for HREF to go high (start of line)
    if (!lineStarted && digitalRead(HREF) == 1) {
      lineStarted = true;
      pixel = 0;
    }
    
    // HREF is high, read pixel data on PCLK rising edge
    if (lineStarted) {
      // Wait for PCLK edges with shorter timeout loop
      for (int i = 0; i < 32 && digitalRead(PCLK) == 1 && millis() < timeout; i++);
      for (int i = 0; i < 32 && digitalRead(PCLK) == 0 && millis() < timeout; i++);
      
      // Read byte with faster direct port read
      if (pixel < BUFFER_SIZE) {
        uint32_t gpio = GPIO.in;
        uint8_t pixelData = 
           ((gpio & D0_bit) ? 1 : 0) |
           ((gpio & D1_bit) ? 2 : 0) |
           ((gpio & D2_bit) ? 4 : 0) |
           ((gpio & D3_bit) ? 8 : 0) |
           ((gpio & D4_bit) ? 16 : 0) |
           ((gpio & D5_bit) ? 32 : 0) |
           ((gpio & D6_bit) ? 64 : 0) |
           ((gpio & D7_bit) ? 128 : 0);
           
        lineBuffer[pixel++] = pixelData;
      }
      
      // Check if line has ended
      if (digitalRead(HREF) == 0) {
        lineStarted = false;
        
        // Skip some lines to process less data (every 2nd line)
        if (line % 2 == 0) {
          // Process the line with more aggressive downsampling (every 4th pixel)
          for (int x = 0; x < IMG_WIDTH; x += 8) {
            if (x < BUFFER_SIZE) {
              uint8_t y = lineBuffer[x];
              
              // Store in our frame buffer (heavily downsampled)
              if (bufferIndex < sizeof(frameBuffer)) {
                frameBuffer[bufferIndex++] = y;
              }
            }
          }
        }
        
        line++;
      }
    }
  }
  
  uint32_t frameEnd = millis();
  // Avoid serial output during frame capture for speed
  if (frameEnd - frameStart > 100) {  // Only log slow frames
    Serial.printf("Frame: %ums, Lines: %d\n", frameEnd - frameStart, line);
  }
}

void processAndDisplayFrame() {
  // Display on OLED if available
  display.clearDisplay();
  
  // The frame buffer contains IMG_HEIGHT/2 x IMG_WIDTH/2 grayscale pixels
  // We'll further sample this down to fit the OLED
  
  for (int y = 0; y < SCREEN_HEIGHT; y++) {
    for (int x = 0; x < SCREEN_WIDTH; x++) {
      // Map OLED coordinates to our downsampled image buffer
      int bufferX = x * (IMG_WIDTH/2) / SCREEN_WIDTH;
      int bufferY = y * (IMG_HEIGHT/2) / SCREEN_HEIGHT;
      int bufferIndex = bufferY * (IMG_WIDTH/2) + bufferX;
      
      if (bufferIndex < sizeof(frameBuffer)) {
        // Simple thresholding to get a binary image for the OLED
        display.drawPixel(x, y, frameBuffer[bufferIndex] > 128 ? SSD1306_WHITE : SSD1306_BLACK);
      }
    }
  }
  
  display.display();
  
  // Also display on serial as ASCII art
  displaySerialImage();
}

void displaySerialImage() {
  Serial.println("\n\n--- Image Preview ---");
  
  // Display 80x60 ASCII art in terminal
  for (int y = 0; y < DISPLAY_HEIGHT; y++) {
    String line = "";
    for (int x = 0; x < DISPLAY_WIDTH; x++) {
      // Map display coordinates to buffer
      int bufferX = x * (IMG_WIDTH/2) / DISPLAY_WIDTH;
      int bufferY = y * (IMG_HEIGHT/2) / DISPLAY_HEIGHT;
      int bufferIndex = bufferY * (IMG_WIDTH/2) + bufferX;
      
      if (bufferIndex < sizeof(frameBuffer)) {
        uint8_t pixel = frameBuffer[bufferIndex];
        // Convert grayscale to ASCII density symbols
        if (pixel < 51)
          line += ' '; // very dark
        else if (pixel < 102)
          line += '.'; // dark
        else if (pixel < 153)
          line += 'o'; // medium
        else if (pixel < 204)
          line += 'O'; // light
        else
          line += '@'; // very light
      }
    }
    Serial.println(line);
  }
  
  Serial.println("--- End of Image ---\n");
}

void setup() {
  Serial.begin(115200);
  delay(1000); // Give time for serial to connect
  Serial.println("ESP32 + OV7670 Camera Web Server");
  
  // Initialize I2C with lower clock speed and timeout options
  Wire.begin(SIOD, SIOC);
  Wire.setClock(100000);  // Try with 100kHz instead of 400kHz (default)
  
  // Add pull-up configuration for I2C pins
  pinMode(SIOD, INPUT_PULLUP);
  pinMode(SIOC, INPUT_PULLUP);
  
  delay(100); // Give some time for I2C to initialize
  
  // Scan I2C bus
  Serial.println("Scanning I2C bus for devices...");
  bool found = false;
  for (byte address = 1; address < 127; address++) {
    Wire.beginTransmission(address);
    byte error = Wire.endTransmission();
    if (error == 0) {
      Serial.printf("I2C device found at address 0x%02X\n", address);
      found = true;
    }
  }
  
  if (!found) {
    Serial.println("No I2C devices found. Check your connections!");
  }
  
  // Initialize OLED Display if connected
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("SSD1306 allocation failed - continuing without display"));
  } else {
    display.clearDisplay();
    display.setTextColor(SSD1306_WHITE);
    display.setTextSize(1);
    display.setCursor(0, 0);
    display.println("ESP32 + OV7670");
    display.println("Initializing...");
    display.display();
  }
  
  // Initialize GPIO pins
  pinMode(VSYNC, INPUT);
  pinMode(HREF, INPUT);
  pinMode(PCLK, INPUT);
  pinMode(D0, INPUT);
  pinMode(D1, INPUT);
  pinMode(D2, INPUT);
  pinMode(D3, INPUT);
  pinMode(D4, INPUT);
  pinMode(D5, INPUT);
  pinMode(D6, INPUT);
  pinMode(D7, INPUT);
  
  // Setup XCLK (8MHz)
    pinMode(XCLK, OUTPUT);
    ledcSetup(0, 16000000, 2); // Channel 0, 16MHz, 2-bit resolution
    ledcAttachPin(XCLK, 0);
    ledcWrite(0, 2);  
  
  delay(100); // Give some time for the clock to stabilize
  
  // Initialize camera
  initCamera();
  
  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi");
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConnected to WiFi!");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());
    
    // Setup web server
    setupWebServer();
  } else {
    Serial.println("\nFailed to connect to WiFi. Check your credentials.");
  }
  
  Serial.println("Camera initialization complete");
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("Camera ready!");
  if (WiFi.status() == WL_CONNECTED) {
    display.println("WiFi Connected");
    display.println("IP: ");
    display.println(WiFi.localIP().toString());
  } else {
    display.println("WiFi Failed");
    display.println("Check credentials");
  }
  display.display();
}

void loop() {
  // If streaming is active and enough time has passed since last frame
  if (streamingActive && (millis() - lastFrameTime) > FRAME_INTERVAL) {
    captureFrame();
    processAndDisplayFrame();
    lastFrameTime = millis();
  }
  
  // Check for serial commands
  if (Serial.available()) {
    char cmd = Serial.read();
    
    // Clear any residual data
    while(Serial.available()) Serial.read();
    
    if (cmd == 's') {
      streamingActive = !streamingActive;
      Serial.println(streamingActive ? "Streaming started" : "Streaming stopped");
      
      display.clearDisplay();
      display.setCursor(0, 0);
      display.println(streamingActive ? "Streaming ON" : "Streaming OFF");
      display.display();
    }
    else if (cmd == 'c') {
      // Single capture
      Serial.println("Capturing single frame...");
      display.clearDisplay();
      display.setCursor(0, 0);
      display.println("Capturing...");
      display.display();
      
      captureFrame();
      processAndDisplayFrame();
    }
  }
  
  delay(10); // Small delay for stability
}

void setupWebServer() {
  // Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(200, "text/html", generateHtmlPage());
    clientConnected = true;
    streamingActive = true;
  });
  
  // Route for getting frame data
  server.on("/frame", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(200, "text/plain", generateFrameData());
  });
  
  // Start server
  server.begin();
}

String generateHtmlPage() {
  String html = "<!DOCTYPE html><html><head>";
  html += "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">";
  html += "<title>ESP32 OV7670 Camera</title>";
  html += "<style>";
  html += "body { font-family: Arial, sans-serif; text-align: center; margin: 0px auto; background-color: #f0f0f0; }";
  html += "h1 { color: #0066cc; margin: 20px 0; }";
  html += ".container { display: flex; flex-direction: column; align-items: center; justify-content: center; }";
  html += ".canvas-container { background-color: #fff; border-radius: 10px; padding: 20px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }";
  html += "canvas { border: 1px solid #ddd; }";
  html += ".controls { margin: 20px 0; }";
  html += "button { background-color: #0066cc; color: white; border: none; padding: 10px 20px; margin: 0 10px; border-radius: 5px; cursor: pointer; }";
  html += "button:hover { background-color: #0052a3; }";
  html += "#status { margin: 10px 0; color: #666; }";
  html += "</style>";
  html += "<script>";
  html += "let streaming = true;";
  html += "let frameCount = 0;";
  html += "let lastFrameTime = 0;";
  html += "function fetchFrame() {";
  html += "  if (!streaming) return;";
  html += "  fetch('/frame')";
  html += "    .then(response => response.text())";
  html += "    .then(data => {";
  html += "      const canvas = document.getElementById('cameraCanvas');";
  html += "      const ctx = canvas.getContext('2d');";
  html += "      const imgData = ctx.createImageData(80, 60);";
  html += "      const rows = data.trim().split('\\n');";
  html += "      for (let y = 0; y < rows.length; y++) {";
  html += "        for (let x = 0; x < rows[y].length; x++) {";
  html += "          const pixelIndex = (y * 80 + x) * 4;";
  html += "          const char = rows[y][x];";
  html += "          let val = 0;";
  html += "          if (char === ' ') val = 0;";
  html += "          else if (char === '.') val = 64;";
  html += "          else if (char === 'o') val = 128;";
  html += "          else if (char === 'O') val = 192;";
  html += "          else if (char === '@') val = 255;";
  html += "          imgData.data[pixelIndex] = val;";
  html += "          imgData.data[pixelIndex+1] = val;";
  html += "          imgData.data[pixelIndex+2] = val;";
  html += "          imgData.data[pixelIndex+3] = 255;";
  html += "        }";
  html += "      }";
  html += "      ctx.putImageData(imgData, 0, 0);";
  html += "      frameCount++;";
  html += "      const now = Date.now();";
  html += "      if (now - lastFrameTime >= 1000) {";
  html += "        document.getElementById('fps').textContent = frameCount;";
  html += "        frameCount = 0;";
  html += "        lastFrameTime = now;";
  html += "      }";
  html += "      setTimeout(fetchFrame, 33);"; // Request next frame in 50ms
  html += "    })";
  html += "    .catch(error => {";
  html += "      console.error('Error fetching frame:', error);";
  html += "      document.getElementById('status').textContent = 'Connection lost. Reconnecting...';";
  html += "      setTimeout(fetchFrame, 500);"; 
  html += "    });";
  html += "}";
  html += "function toggleStreaming() {";
  html += "  streaming = !streaming;";
  html += "  document.getElementById('streamBtn').textContent = streaming ? 'Pause Stream' : 'Resume Stream';";
  html += "  if (streaming) fetchFrame();";
  html += "}";
  html += "function captureSnapshot() {";
  html += "  const canvas = document.getElementById('cameraCanvas');";
  html += "  const img = canvas.toDataURL('image/png');";
  html += "  const link = document.createElement('a');";
  html += "  link.download = 'camera_snapshot.png';";
  html += "  link.href = img;";
  html += "  link.click();";
  html += "}";
  html += "window.onload = function() {";
  html += "  const canvas = document.getElementById('cameraCanvas');";
  html += "  const ctx = canvas.getContext('2d');";
  html += "  ctx.fillStyle = 'black';";
  html += "  ctx.fillRect(0, 0, canvas.width, canvas.height);";
  html += "  ctx.fillStyle = 'white';";
  html += "  ctx.font = '16px Arial';";
  html += "  ctx.textAlign = 'center';";
  html += "  ctx.fillText('Loading...', canvas.width/2, canvas.height/2);";
  html += "  fetchFrame();";
  html += "};";
  html += "</script>";
  html += "</head><body>";
  html += "<h1>ESP32 OV7670 Camera Feed</h1>";
  html += "<div class=\"container\">";
  html += "  <div class=\"canvas-container\">";
  html += "    <canvas id=\"cameraCanvas\" width=\"80\" height=\"60\" style=\"width:400px; height:300px;\"></canvas>";
  html += "  </div>";
  html += "  <div class=\"controls\">";
  html += "    <button id=\"streamBtn\" onclick=\"toggleStreaming()\">Pause Stream</button>";
  html += "    <button onclick=\"captureSnapshot()\">Take Snapshot</button>";
  html += "  </div>";
  html += "  <div id=\"status\">Connected to ESP32 camera</div>";
  html += "  <div>FPS: <span id=\"fps\">0</span></div>";
  html += "</div>";
  html += "</body></html>";
  return html;
}

String generateFrameData() {
  // If a frame hasn't been captured already, capture one now
  if (!streamingActive) {
    captureFrame();
    processAndDisplayFrame();
  }
  
  // Convert the frame buffer to ASCII art
  String frameData = "";
  for (int y = 0; y < DISPLAY_HEIGHT; y++) {
    String line = "";
    for (int x = 0; x < DISPLAY_WIDTH; x++) {
      // Map display coordinates to buffer
      int bufferX = x * (IMG_WIDTH/2) / DISPLAY_WIDTH;
      int bufferY = y * (IMG_HEIGHT/2) / DISPLAY_HEIGHT;
      int bufferIndex = bufferY * (IMG_WIDTH/2) + bufferX;
      
      if (bufferIndex < sizeof(frameBuffer)) {
        uint8_t pixel = frameBuffer[bufferIndex];
        // Convert grayscale to ASCII density symbols
        if (pixel < 51)
          line += ' '; // very dark
        else if (pixel < 102)
          line += '.'; // dark
        else if (pixel < 153)
          line += 'o'; // medium
        else if (pixel < 204)
          line += 'O'; // light
        else
          line += '@'; // very light
      }
    }
    frameData += line + "\n";
  }
  return frameData;
}

// Keep your existing initCamera, writeRegister, readRegister, captureFrame, 
// processAndDisplayFrame, and displaySerialImage functions unchanged