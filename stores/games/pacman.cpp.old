#include <Arduino.h>
#include <WiFi.h>
#include <esp_now.h>
#include <Preferences.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// ===== Communication Configuration =====
#define KEY_SIZE 128
#define MAX_MESSAGE_LEN 200
#define MAX_PEERS 10
#define BROADCAST_INTERVAL 5000  // Broadcast MAC every 5 seconds
#define KEY_EXCHANGE_DEBOUNCE 30000  // 30 seconds minimum between key exchanges with the same peer

#define RED_LED 16
#define BLUE_LED 17

// Traffic light timers
unsigned long trafficLightStartTime = 0;
bool isRedLight = true;
int redLightDuration = 10000;  // 10 seconds
int blueLightDuration = 6000;  // 6 seconds
bool trafficLightActive = false;

// Now we can use MAX_PEERS in variable declarations
unsigned long lastDisplayUpdate = 0;
#define DISPLAY_UPDATE_INTERVAL 2000  // Only update status display every 2 seconds
bool displayingMessage = false;       // Flag to prevent status updates while showing a message
unsigned long messageDisplayTime = 0; // When the current message started displaying
#define MESSAGE_DISPLAY_DURATION 5000
unsigned long lastKeyExchangeTime[MAX_PEERS];  // Now MAX_PEERS is defined before using it

// ===== OLED Display Configuration =====
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET    -1
#define SCREEN_ADDR   0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// ===== Communication Configuration =====
#define KEY_SIZE 128
#define MAX_MESSAGE_LEN 200
#define MAX_PEERS 10
#define BROADCAST_INTERVAL 5000  // Broadcast MAC every 5 seconds

enum LogMode {
  LOG_VERBOSE = 0,  // Show all logs including connection attempts
  LOG_MESSAGES = 1  // Show only messages, errors, and state changes
};

// Add these variables to your global variables section
LogMode currentLogMode = LOG_VERBOSE;
bool isConnected = false;
unsigned long lastConnectionCheck = 0;
#define CONNECTION_CHECK_INTERVAL 10000

// ===== Message Types =====
enum MessageType {
  DISCOVERY_BROADCAST = 0,
  KEY_EXCHANGE = 1,
  DATA_MESSAGE = 4
};

// ===== Device Mode =====
enum DeviceMode {
  MODE_A = 0,  // Commander: discovers and manages multiple peers
  MODE_B = 1   // Broadcaster: broadcasts presence and accepts connections
};

// ===== Data Structures =====
struct PeerInfo {
  uint8_t mac[6];
  uint8_t publicKey[KEY_SIZE];
  bool active;
  char name[20];
};

struct __attribute__((packed)) SecurePacket {
  uint8_t type;
  uint8_t length;
  uint8_t data[250]; // ESP-NOW max payload is 250 bytes
};

// ===== Global Variables =====
Preferences preferences;
uint8_t privateKey[KEY_SIZE];
uint8_t publicKey[KEY_SIZE];
size_t pubKeyLen = 0;

DeviceMode deviceMode = MODE_A;
PeerInfo peerList[MAX_PEERS];
int activePeerCount = 0;
int selectedPeerIndex = -1;
unsigned long lastBroadcastTime = 0;

// ===== Function Declarations =====
void generateKeyPair();
bool loadKeys();
void saveKeys();
bool loadPeerList();
void savePeerList();
void initESPNow();
void initDisplay();
void updateDisplay(const char* message);
void broadcastPresence();
void discoverPeers();
void sendPublicKey(uint8_t* targetMac);
void sendMessage(const char* message, size_t len);
int addPeer(const uint8_t* mac, const uint8_t* key, size_t keyLen);
void listPeers();
void selectPeer(int index);
void handleSerialCommands(String command); 
void onDataSent(const uint8_t* mac_addr, esp_now_send_status_t status);
void onDataReceived(const uint8_t* mac_addr, const uint8_t* data, int len);
void importantLog(const char* message);
void setLogMode(LogMode mode);
void verboseLog(const char* message);
void verboseLogf(const char* format, ...);
void updateStatusDisplay();


// ===== Setup Function =====
void setup() {

  // Initialize traffic light pins
  pinMode(RED_LED, OUTPUT);
  pinMode(BLUE_LED, OUTPUT);
  
  // Start with red light
  digitalWrite(RED_LED, HIGH);
  digitalWrite(BLUE_LED, LOW);
  trafficLightStartTime = millis();
  trafficLightActive = true;
  isRedLight = true;

  // Initialize serial communication
  Serial.begin(115200);
  while (!Serial) delay(100);
  Serial.println("ESP32 Secure Node Starting");
  
  // Initialize random number generator
  randomSeed(esp_random());
  
  // Initialize I2C for OLED
  Wire.begin(21, 22); // SDA=21, SCL=22
  
  // Initialize display
  initDisplay();
  
  // Initialize storage
  preferences.begin("esp-secure", false);
  
  // Load or generate keys
  if (!loadKeys()) {
    Serial.println("Generating new key pair...");
    generateKeyPair();
    saveKeys();
  }

  for (int i = 0; i < MAX_PEERS; i++) {
    lastKeyExchangeTime[i] = 0;
  }
  
  // Initialize ESP-NOW
  initESPNow();
  
  // Load saved peer list
  loadPeerList();
  
  // Display startup menu
  Serial.println("\n===== ESP32 Secure Communication =====");
  Serial.println("Current mode: " + String(deviceMode == MODE_A ? "A (Commander)" : "B (Broadcaster)"));
  Serial.println("Commands:");
  Serial.println("  mode a - Set as device A (commander)");
  Serial.println("  mode b - Set as device B (broadcaster)");
  Serial.println("  list   - List all known peers");
  Serial.println("  select <num> - Select peer to message");
  Serial.println("  scan   - Scan for broadcasting devices");
  Serial.println("  clear  - Clear peer list");
  Serial.println("  <text> - Send message to selected peer");
  
  // Show status on display
  updateDisplay("System ready");
}

// ===== Main Loop =====
void loop() {
  unsigned long currentTime = millis();
  
  // For mode B: broadcast MAC periodically
  if (deviceMode == MODE_B) {
    if (currentTime - lastBroadcastTime >= BROADCAST_INTERVAL) {
      broadcastPresence();
      lastBroadcastTime = currentTime;
    }
  }
  
  // Check connection status periodically
  if (currentTime - lastConnectionCheck >= CONNECTION_CHECK_INTERVAL) {
    bool wasConnected = isConnected;
    
    // Check if we have at least one active peer
    isConnected = false;
    for (int i = 0; i < MAX_PEERS; i++) {
      if (peerList[i].active) {
        isConnected = true;
        break;
      }
    }
    
    // If connection status changed, notify
    if (wasConnected != isConnected) {
      if (isConnected) {
        importantLog("*** CONNECTED ***");
        // Auto-switch to message mode once connected
        if (currentLogMode == LOG_VERBOSE) {
          setLogMode(LOG_MESSAGES);
        }
      } else {
        importantLog("*** DISCONNECTED ***");
        // Auto-switch to verbose mode when disconnected
        if (currentLogMode == LOG_MESSAGES) {
          setLogMode(LOG_VERBOSE);
        }
      }
    }
    
    lastConnectionCheck = currentTime;
  }
  
  // Handle status display updates - but only if not showing a message
  if (!displayingMessage && currentTime - lastDisplayUpdate >= DISPLAY_UPDATE_INTERVAL) {
    updateStatusDisplay();
    lastDisplayUpdate = currentTime;
  }
  
  // Handle user input from Serial with buffering
  static String inputBuffer = "";
  
  while (Serial.available()) {
    char c = Serial.read();
    
    if (c == '\n' || c == '\r') {
      // Process the complete line
      if (inputBuffer.length() > 0) {
        // Process the command (handled in handleSerialCommands)
        handleSerialCommands(inputBuffer);
        // Clear the buffer for next command
        inputBuffer = "";
      }
    } else {
      // Add character to buffer
      inputBuffer += c;
      // Echo the character to see what you're typing
      Serial.print(c);
    }
  }
  if (trafficLightActive) {
    unsigned long elapsedTime = currentTime - trafficLightStartTime;
    
    if (isRedLight) {
      // Red light countdown
      int remainingSeconds = (redLightDuration - elapsedTime) / 1000;
      
      if (remainingSeconds != ((redLightDuration - (currentTime - trafficLightStartTime - 100)) / 1000)) {
        // Update countdown display every second
        char countMsg[32];
        sprintf(countMsg, "Red: %d seconds", remainingSeconds > 0 ? remainingSeconds : 0);
        updateDisplay(countMsg);
      }
      
      // Check if red light duration has elapsed
      if (elapsedTime >= redLightDuration) {
        // Switch to blue light
        digitalWrite(RED_LED, LOW);
        digitalWrite(BLUE_LED, HIGH);
        trafficLightStartTime = currentTime;
        isRedLight = false;
        updateDisplay("Blue light active");
      }
    } else {
      // Blue light countdown
      int remainingSeconds = (blueLightDuration - elapsedTime) / 1000;
      
      if (remainingSeconds != ((blueLightDuration - (currentTime - trafficLightStartTime - 100)) / 1000)) {
        // Update countdown display every second
        char countMsg[32];
        sprintf(countMsg, "Blue: %d seconds", remainingSeconds > 0 ? remainingSeconds : 0);
        updateDisplay(countMsg);
      }
      
      // Check if blue light duration has elapsed
      if (elapsedTime >= blueLightDuration) {
        // Switch to red light
        digitalWrite(RED_LED, HIGH);
        digitalWrite(BLUE_LED, LOW);
        trafficLightStartTime = currentTime;
        isRedLight = true;
        updateDisplay("Red light active");
      }
    }
  }
  
  delay(50); 
}


void updateStatusDisplay() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  
  // Display mode and status
  display.setCursor(0, 0);
  display.print("Mode: ");
  display.println(deviceMode == MODE_A ? "A (Commander)" : "B (Broadcaster)");
  
  // Display MAC address
  display.print("MAC: ");
  uint8_t myMac[6];
  WiFi.macAddress(myMac);
  for (int i = 0; i < 6; i++) {
    display.printf("%02X", myMac[i]);
    if (i < 5) display.print(":");
  }
  display.println();
  
  // Display peers info
  display.print("Peers: ");
  display.println(activePeerCount);
  
  if (selectedPeerIndex >= 0 && selectedPeerIndex < MAX_PEERS && peerList[selectedPeerIndex].active) {
    display.print("Selected: ");
    display.println(peerList[selectedPeerIndex].name);
  }
  
  // Display log mode
  display.print("Log: ");
  display.println(currentLogMode == LOG_VERBOSE ? "Verbose" : "Messages");
  
  display.display();
}

// Modify the existing updateDisplay function to be for temporary messages
void updateDisplay(const char* message) {
  if (message && strlen(message) > 0) {
    // Only do a full display update if not in message-only mode
    // or if this is an important message
    if (currentLogMode == LOG_VERBOSE) {
      updateStatusDisplay();
      
      // Add the message at the bottom
      display.drawLine(0, 40, SCREEN_WIDTH, 40, SSD1306_WHITE);
      display.setCursor(0, 45);
      display.println(message);
      display.display();
    }
    // In message mode, just print important updates to serial, 
    // don't constantly refresh the display
  }
}

// ===== Initialize OLED Display =====
void initDisplay() {
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDR)) {
    Serial.println("SSD1306 allocation failed");
    for(;;); // Don't proceed, loop forever
  }
  
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("ESP32 Secure Node");
  display.println("Starting...");
  display.display();
  delay(1000);
}

void verboseLog(const char* message) {
  if (currentLogMode == LOG_VERBOSE) {
    Serial.println(message);
  }
}

// Log formatted message only in verbose mode
void verboseLogf(const char* format, ...) {
  if (currentLogMode == LOG_VERBOSE) {
    char buffer[256];
    va_list args;
    va_start(args, format);
    vsnprintf(buffer, sizeof(buffer), format, args);
    va_end(args);
    Serial.println(buffer);
  }
}

// Always log important messages
void importantLog(const char* message) {
  Serial.println(message);
  
  // If we're in message mode and this is a connection status change, 
  // update the display
  if (currentLogMode == LOG_MESSAGES) {
    updateDisplay(message);
  }
}

// Set the log mode and notify user
void setLogMode(LogMode mode) {
  currentLogMode = mode;
  
  if (mode == LOG_VERBOSE) {
    Serial.println("\n*** VERBOSE LOGGING ENABLED ***");
    Serial.println("All connection attempts and status messages will be shown");
    Serial.println("Type 'log messages' to see only messages\n");
  } else {
    Serial.println("\n*** MESSAGE-ONLY MODE ENABLED ***");
    Serial.println("Only showing messages and important status changes");
    Serial.println("Type 'log verbose' to see all connection details\n");
  }
  
  // Update display with current mode
  char displayMsg[32];
  sprintf(displayMsg, "Log: %s", mode == LOG_VERBOSE ? "Verbose" : "Messages");
  updateDisplay(displayMsg);
}

// // ===== Update OLED Display =====
// void updateDisplay(const char* message) {
//   display.clearDisplay();
//   display.setTextSize(1);
//   display.setTextColor(SSD1306_WHITE);
  
//   // Display mode and status
//   display.setCursor(0, 0);
//   display.print("Mode: ");
//   display.println(deviceMode == MODE_A ? "A (Commander)" : "B (Broadcaster)");
  
//   // Display MAC address
//   display.print("MAC: ");
//   uint8_t myMac[6];
//   WiFi.macAddress(myMac);
//   for (int i = 0; i < 6; i++) {
//     display.printf("%02X", myMac[i]);
//     if (i < 5) display.print(":");
//   }
//   display.println();
  
//   // Display peers info
//   display.print("Peers: ");
//   display.println(activePeerCount);
  
//   if (selectedPeerIndex >= 0 && selectedPeerIndex < MAX_PEERS && peerList[selectedPeerIndex].active) {
//     display.print("Selected: ");
//     display.println(peerList[selectedPeerIndex].name);
//   }
  
//   // Display message at the bottom
//   if (message && strlen(message) > 0) {
//     display.drawLine(0, 40, SCREEN_WIDTH, 40, SSD1306_WHITE);
//     display.setCursor(0, 45);
//     display.println(message);
//   }
  
//   display.display();
// }

// ===== Handle Serial Commands =====
// Update the function signature to accept a String parameter:

void handleSerialCommands(String command) {
  // Command is already received and trimmed
  
  if (command.startsWith("mode a")) {
    deviceMode = MODE_A;
    importantLog("Mode set to A (Commander)");
    updateDisplay("Mode set to A");
    saveKeys();
  }
  else if (command.startsWith("mode b")) {
    deviceMode = MODE_B;
    importantLog("Mode set to B (Broadcaster)");
    updateDisplay("Mode set to B");
    saveKeys();
  }
  else if (command.startsWith("log verbose")) {
    setLogMode(LOG_VERBOSE);
  }
  else if (command.startsWith("log messages")) {
    setLogMode(LOG_MESSAGES);
  }
  else if (command.startsWith("list")) {
    listPeers();
  }
  else if (command.startsWith("select ")) {
    int index = command.substring(7).toInt();
    selectPeer(index);
  }
  else if (command.startsWith("scan")) {
    discoverPeers();
  }
  // Add the clear terminal command
  else if (command.startsWith("cls") || command.startsWith("clear")) {
    // Send ANSI escape sequence to clear terminal
    Serial.write("\033[2J\033[H");
    Serial.println("Terminal cleared");
    Serial.println("ESP32 Secure Communication Ready");
  }
  else if (command.startsWith("clear peers")) {
    for (int i = 0; i < MAX_PEERS; i++) {
      peerList[i].active = false;
    }
    activePeerCount = 0;
    savePeerList();
    Serial.println("\nPeer list cleared");
    updateDisplay("\nPeer list cleared");
  }
  else if (!command.isEmpty()) {
    // Treat as message to send
    if (selectedPeerIndex >= 0 && selectedPeerIndex < MAX_PEERS && 
        peerList[selectedPeerIndex].active) {
      sendMessage(command.c_str(), command.length());
    } else {
      importantLog("\nNo peer selected. Use 'select <num>' first.");
      updateDisplay("\nNo peer selected");
    }
  }
  // Add this in your handleSerialCommands function before the else if (!command.isEmpty()) block:

  else if (command.startsWith("traffic")) {
    if (command.indexOf("on") > 0) {
      trafficLightActive = true;
      trafficLightStartTime = millis();
      isRedLight = true;
      digitalWrite(RED_LED, HIGH);
      digitalWrite(BLUE_LED, LOW);
      Serial.println("Traffic light activated (starting with RED)");
      updateDisplay("Traffic light ON");
    } 
    else if (command.indexOf("off") > 0) {
      trafficLightActive = false;
      digitalWrite(RED_LED, LOW);
      digitalWrite(BLUE_LED, LOW);
      Serial.println("Traffic light deactivated");
      updateDisplay("Traffic light OFF");
    }
    else if (command.indexOf("red") > 0) {
      isRedLight = true;
      trafficLightStartTime = millis();
      digitalWrite(RED_LED, HIGH);
      digitalWrite(BLUE_LED, LOW);
      Serial.println("Switched to RED light");
      updateDisplay("Switched to RED");
    }
    else if (command.indexOf("blue") > 0) {
      isRedLight = false;
      trafficLightStartTime = millis();
      digitalWrite(RED_LED, LOW);
      digitalWrite(BLUE_LED, HIGH);
      Serial.println("Switched to BLUE light");
      updateDisplay("Switched to BLUE");
    }
  }
  
}

// ===== Key Generation =====
void generateKeyPair() {
  // Simple key generation for demo purposes
  memset(privateKey, 0, KEY_SIZE);
  memset(publicKey, 0, KEY_SIZE);
  
  pubKeyLen = KEY_SIZE;
  
  // Generate random keys
  for (int i = 0; i < KEY_SIZE; i++) {
    privateKey[i] = random(256);
    publicKey[i] = privateKey[i] ^ random(256);
  }
  
  Serial.println("Key pair generated");
  updateDisplay("Keys generated");
}

// ===== Key Management =====
bool loadKeys() {
  if (preferences.isKey("privateKey") && preferences.isKey("publicKey")) {
    preferences.getBytes("privateKey", privateKey, KEY_SIZE);
    pubKeyLen = preferences.getBytesLength("publicKey");
    preferences.getBytes("publicKey", publicKey, pubKeyLen);
    
    // Load device mode
    if (preferences.isKey("deviceMode")) {
      deviceMode = (DeviceMode)preferences.getUChar("deviceMode");
    }
    
    Serial.println("Keys loaded from storage");
    return true;
  }
  return false;
}

void saveKeys() {
  preferences.putBytes("privateKey", privateKey, KEY_SIZE);
  preferences.putBytes("publicKey", publicKey, pubKeyLen);
  preferences.putUChar("deviceMode", deviceMode);
  Serial.println("Keys saved to storage");
}

// ===== Peer Management =====
bool loadPeerList() {
  // Initialize peer list
  for (int i = 0; i < MAX_PEERS; i++) {
    peerList[i].active = false;
  }
  
  // Load saved peers
  activePeerCount = 0;
  for (int i = 0; i < MAX_PEERS; i++) {
    char keyName[16];
    sprintf(keyName, "peer_%d", i);
    
    if (preferences.isKey(keyName)) {
      size_t dataSize = preferences.getBytesLength(keyName);
      if (dataSize > 0) {
        uint8_t data[sizeof(PeerInfo)];
        preferences.getBytes(keyName, data, dataSize);
        
        PeerInfo* peer = (PeerInfo*)data;
        if (peer->active) {
          memcpy(&peerList[i], peer, sizeof(PeerInfo));
          activePeerCount++;
          
          // Add as ESP-NOW peer
          esp_now_peer_info_t peerInfo = {};
          memcpy(peerInfo.peer_addr, peerList[i].mac, 6);
          peerInfo.channel = 0;
          peerInfo.encrypt = false;
          
          esp_now_add_peer(&peerInfo);
        }
      }
    }
  }
  
  Serial.printf("Loaded %d peers from storage\n", activePeerCount);
  return activePeerCount > 0;
}

void savePeerList() {
  for (int i = 0; i < MAX_PEERS; i++) {
    char keyName[16];
    sprintf(keyName, "peer_%d", i);
    
    if (peerList[i].active) {
      preferences.putBytes(keyName, &peerList[i], sizeof(PeerInfo));
    } else if (preferences.isKey(keyName)) {
      preferences.remove(keyName);
    }
  }
  
  Serial.printf("Saved %d peers to storage\n", activePeerCount);
}

void listPeers() {
  Serial.println("\nPeer List:");
  Serial.println("------------------------------------------");
  
  if (activePeerCount == 0) {
    Serial.println("No peers found. Use 'scan' to discover peers.");
    updateDisplay("No peers found");
    return;
  }
  
  for (int i = 0; i < MAX_PEERS; i++) {
    if (peerList[i].active) {
      Serial.printf("%d: %s [", i, peerList[i].name);
      
      for (int j = 0; j < 6; j++) {
        Serial.printf("%02X", peerList[i].mac[j]);
        if (j < 5) Serial.print(":");
      }
      
      Serial.print("]");
      
      if (i == selectedPeerIndex) {
        Serial.print(" *SELECTED*");
      }
      
      Serial.println();
    }
  }
  Serial.println("------------------------------------------");
  updateDisplay("Listed peers");
}

void selectPeer(int index) {
  if (index >= 0 && index < MAX_PEERS && peerList[index].active) {
    selectedPeerIndex = index;
    Serial.printf("Selected peer %d: %s\n", index, peerList[index].name);
    char msg[32];
    sprintf(msg, "Selected: %s", peerList[index].name);
    updateDisplay(msg);
  } else {
    Serial.println("Invalid peer index");
    updateDisplay("Invalid peer index");
  }
}

int addPeer(const uint8_t* mac, const uint8_t* key, size_t keyLen) {
  // Check if already exists
  for (int i = 0; i < MAX_PEERS; i++) {
    if (peerList[i].active && memcmp(peerList[i].mac, mac, 6) == 0) {
      // Update key if provided
      if (key != NULL && keyLen > 0) {
        memcpy(peerList[i].publicKey, key, keyLen);
      }
      return i; // Already exists
    }
  }
  
  // Find empty slot
  int emptySlot = -1;
  for (int i = 0; i < MAX_PEERS; i++) {
    if (!peerList[i].active) {
      emptySlot = i;
      break;
    }
  }
  
  if (emptySlot == -1) {
    Serial.println("Peer list full. Remove a peer first.");
    updateDisplay("Peer list full");
    return -1;
  }
  
  // Add to peer list
  memcpy(peerList[emptySlot].mac, mac, 6);
  
  if (key != NULL && keyLen > 0) {
    memcpy(peerList[emptySlot].publicKey, key, keyLen);
  }
  
  peerList[emptySlot].active = true;
  sprintf(peerList[emptySlot].name, "Peer_%d", emptySlot);
  
  // Register with ESP-NOW
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, mac, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;
  
  if (esp_now_is_peer_exist(mac) == false) {
    esp_now_add_peer(&peerInfo);
  }
  
  activePeerCount++;
  savePeerList();
  
  // Display added peer info
  char macStr[18];
  sprintf(macStr, "%02X:%02X:...", mac[0], mac[1]);
  char msg[32];
  sprintf(msg, "Added peer: %s", macStr);
  updateDisplay(msg);
  
  return emptySlot;
}

// ===== ESP-NOW Initialization =====
void initESPNow() {
  WiFi.mode(WIFI_STA);
  
  Serial.print("ESP32 MAC: ");
  Serial.println(WiFi.macAddress());
  
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    updateDisplay("ESP-NOW init failed");
    return;
  }
  
  esp_now_register_send_cb(onDataSent);
  esp_now_register_recv_cb(onDataReceived);
  
  updateDisplay("ESP-NOW initialized");
}

// ===== Communication Functions =====
void broadcastPresence() {
  // Prepare packet with our MAC
  SecurePacket packet;
  packet.type = DISCOVERY_BROADCAST;
  packet.length = 6;
  
  uint8_t myMac[6];
  WiFi.macAddress(myMac);
  memcpy(packet.data, myMac, 6);
  
  // Broadcast address
  uint8_t broadcastAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
  
  // Register temporary broadcast peer
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;
  
  esp_now_add_peer(&peerInfo);
  
  // Send broadcast
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t*)&packet, 
                                 sizeof(packet.type) + sizeof(packet.length) + packet.length);
  
  // Remove temporary broadcast peer
  esp_now_del_peer(broadcastAddress);
  
  if (result == ESP_OK) {
    verboseLog("Broadcasting presence");
  } else {
    importantLog("Failed to broadcast presence");
  }
}

void discoverPeers() {
  if (deviceMode != MODE_A) {
    Serial.println("Discovery only available in mode A");
    updateDisplay("Need mode A to scan");
    return;
  }
  
  Serial.println("Scanning for broadcasting devices...");
  updateDisplay("Scanning...");
}

void sendPublicKey(uint8_t* targetMac) {
  // Prepare packet with public key
  SecurePacket packet;
  packet.type = KEY_EXCHANGE;
  packet.length = pubKeyLen;
  memcpy(packet.data, publicKey, pubKeyLen);
  
  // Register temporary peer if not already in list
  esp_now_peer_info_t peerInfo = {};
  memcpy(peerInfo.peer_addr, targetMac, 6);
  peerInfo.channel = 0;
  peerInfo.encrypt = false;
  
  if (esp_now_is_peer_exist(targetMac) == false) {
    esp_now_add_peer(&peerInfo);
  }
  
  // Send data
  esp_err_t result = esp_now_send(targetMac, (uint8_t*)&packet, 
                                 sizeof(packet.type) + sizeof(packet.length) + packet.length);
  
  if (result == ESP_OK) {
    verboseLog("Public key sent successfully");
  } else {
    importantLog("Failed to send public key");
  }
}

void sendMessage(const char* message, size_t len) {
  if (selectedPeerIndex < 0 || selectedPeerIndex >= MAX_PEERS || !peerList[selectedPeerIndex].active) {
    Serial.println("No valid peer selected");
    updateDisplay("No peer selected");
    return;
  }
  
  // Prepare packet
  SecurePacket packet;
  packet.type = DATA_MESSAGE;
  packet.length = len > MAX_MESSAGE_LEN ? MAX_MESSAGE_LEN : len;
  memcpy(packet.data, message, packet.length);
  
  // Send data
  esp_err_t result = esp_now_send(peerList[selectedPeerIndex].mac, (uint8_t*)&packet, 
                                 sizeof(packet.type) + sizeof(packet.length) + packet.length);
  
  if (result == ESP_OK) {
    Serial.println("\nMessage sent");
    updateDisplay("\nMessage sent");
  } else {
    Serial.println("Failed to send message");
    updateDisplay("Send failed");
  }
}

// ===== ESP-NOW Callbacks =====
void onDataSent(const uint8_t* mac_addr, esp_now_send_status_t status) {
  if (status == ESP_NOW_SEND_SUCCESS) {
    verboseLog("Send status: Success");
  } else {
    importantLog("Send status: Failed");  // Always show failures
  }
}

void onDataReceived(const uint8_t* mac_addr, const uint8_t* data, int data_len) {
  SecurePacket* packet = (SecurePacket*)data;
  
  switch (packet->type) {
    case DISCOVERY_BROADCAST:
      {
        if (deviceMode == MODE_A) {
          char macStr[18];
          sprintf(macStr, "%02X:%02X:%02X:%02X:%02X:%02X", 
                 mac_addr[0], mac_addr[1], mac_addr[2], 
                 mac_addr[3], mac_addr[4], mac_addr[5]);
          verboseLogf("Discovered device: %s", macStr);
          
          // Add to peer list without key
          int idx = addPeer(mac_addr, NULL, 0);
          
          // Send our public key to establish secure connection
          if (idx >= 0) {
            sendPublicKey((uint8_t*)mac_addr);
          }
        }
      }
      break;
          
    case KEY_EXCHANGE:
      {
        char macStr[18];
        sprintf(macStr, "%02X:%02X:%02X:%02X:%02X:%02X", 
              mac_addr[0], mac_addr[1], mac_addr[2], 
              mac_addr[3], mac_addr[4], mac_addr[5]);
        verboseLogf("Received public key from: %s", macStr);
        
        // Add/update peer with key
        int peerIdx = addPeer(mac_addr, packet->data, packet->length);
        
        // Check if we need to respond with our key (only once per time period)
        bool shouldSendKey = false;
        unsigned long currentTime = millis();
        
        if (peerIdx >= 0) {
          if (currentTime - lastKeyExchangeTime[peerIdx] > KEY_EXCHANGE_DEBOUNCE) {
            lastKeyExchangeTime[peerIdx] = currentTime;
            shouldSendKey = true;
          }
        }
        
        // If we're device B and we should send our key, do so
        if (deviceMode == MODE_B && shouldSendKey) {
          sendPublicKey((uint8_t*)mac_addr);
        }
        
        importantLog("Key exchange completed");
        updateDisplay("Key exchange done");
      }
      break;
      
    case DATA_MESSAGE:
      {
        // This part should always be logged, as it's an actual message
        // Check if this is from a known peer
        int fromPeerIdx = -1;
        for (int i = 0; i < MAX_PEERS; i++) {
          if (peerList[i].active && memcmp(peerList[i].mac, mac_addr, 6) == 0) {
            fromPeerIdx = i;
            break;
          }
        }
        
        if (fromPeerIdx >= 0) {
          // Get the message
          char message[MAX_MESSAGE_LEN + 1];
          size_t msgLen = packet->length > MAX_MESSAGE_LEN ? MAX_MESSAGE_LEN : packet->length;
          memcpy(message, packet->data, msgLen);
          message[msgLen] = '\0';
          
          // Always print messages
          Serial.printf("Message from %s: %s\n", peerList[fromPeerIdx].name, message);

          // Display message on OLED
          display.clearDisplay();
          display.setTextSize(1);
          display.setTextColor(SSD1306_WHITE);

          // Show sender info
          display.setCursor(0, 0);
          display.print("From: ");
          display.println(peerList[fromPeerIdx].name);

          // Draw a separator line
          display.drawLine(0, 10, SCREEN_WIDTH, 10, SSD1306_WHITE);

          // Display message with simple wrapping
          display.setCursor(0, 14);

          int lineY = 14;
          int charCount = 0;
          for (int i = 0; i < msgLen; i++) {
            if (charCount >= 21) { // About 21 chars fit per line
              lineY += 10;
              display.setCursor(0, lineY);
              charCount = 0;
              
              // Check if we're going off screen
              if (lineY > SCREEN_HEIGHT - 10)
                break;
            }
            
            display.print(message[i]);
            charCount++;
          }

          if (isRedLight && strcmp(message, "OK") == 0) {
            // Immediately switch to blue light
            digitalWrite(RED_LED, LOW);
            digitalWrite(BLUE_LED, HIGH);
            trafficLightStartTime = millis();
            isRedLight = false;
            
            Serial.println("Received OK message, switching to blue light");
            updateDisplay("Emergency override: BLUE");
          }

          display.display();

          // Set flag to prevent status updates while showing this message
          displayingMessage = true;
          messageDisplayTime = millis();
        } else {
          importantLog("Message received from unknown peer");
        }
      }
      break;
      
    default:
      importantLog("Unknown packet type");
      break;
  }
}