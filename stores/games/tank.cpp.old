#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include <math.h>

// Display configuration
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C

// LED pins
#define RED_LED 14
#define BLUE_LED 12

// Joystick 1 pins (First player)
#define JOYSTICK1_X_PIN 34
#define JOYSTICK1_Y_PIN 35
#define JOYSTICK1_SW_PIN 15

// Joystick 2 pins (Second player)
#define JOYSTICK2_X_PIN 32
#define JOYSTICK2_Y_PIN 33
#define JOYSTICK2_SW_PIN 18

// Game constants
#define TANK_SIZE 4
#define BULLET_SIZE 1
#define WALL_SIZE 6
#define MAX_BULLETS 10
#define MAX_WALLS 15
#define BULLET_SPEED 2.0
#define TANK_SPEED 1.0
#define TANK_ROTATION_SPEED 0.1
#define RELOAD_TIME 500  // Milliseconds
#define BULLET_LIFETIME 5000  // Milliseconds
#define BULLET_BOUNCE_MAX 3

// Joystick calibration
#define JOYSTICK_CENTER 2048
#define JOYSTICK_DEADZONE 500
#define JOYSTICK_MAX_RANGE 2048

// Game structures
struct Vector2 {
  float x;
  float y;
};

struct Tank {
  Vector2 position;
  float angle;  // Rotation in radians
  float speed;
  int health;
  unsigned long lastShotTime;
  bool isAlive;
};

struct Bullet {
  Vector2 position;
  Vector2 velocity;
  unsigned long creationTime;
  int ownerId;  // 0 = player 1, 1 = player 2
  bool active;
  int bounceCount;
};

struct Wall {
  Vector2 position;
  int width;
  int height;
  bool active;
};

// Game state variables
Tank tanks[2];
Bullet bullets[MAX_BULLETS];
Wall walls[MAX_WALLS];
Vector2 mapOffset = {0, 0};
bool gameOver = false;
int winner = -1;

// Display object
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Task handles
TaskHandle_t gameTaskHandle = NULL;
TaskHandle_t inputTaskHandle = NULL;

// Function declarations
void initializeGame();
void readJoysticks();
void updateGame();
void renderGame();
void fireBullet(int tankId);
bool checkCollision(Vector2 pos, float radius, Wall wall);
bool checkPointInRect(float x, float y, float rectX, float rectY, float rectW, float rectH);

// Game task
void gameTask(void *pvParameters) {
  initializeGame();
  
  unsigned long lastFrameTime = millis();
  
  while (1) {
    unsigned long currentTime = millis();
    float deltaTime = (currentTime - lastFrameTime) / 1000.0f;
    lastFrameTime = currentTime;
    
    if (!gameOver) {
      updateGame();
    }
    
    renderGame();
    vTaskDelay(20 / portTICK_PERIOD_MS);
  }
}

// Input task
void inputTask(void *pvParameters) {
  while (1) {
    readJoysticks();
    vTaskDelay(20 / portTICK_PERIOD_MS);
  }
}

void setup() {
  // Initialize serial
  Serial.begin(115200);
  
  // Initialize LEDs
  pinMode(RED_LED, OUTPUT);
  pinMode(BLUE_LED, OUTPUT);
  
  // Initialize joystick pins
  pinMode(JOYSTICK1_X_PIN, INPUT);
  pinMode(JOYSTICK1_Y_PIN, INPUT);
  pinMode(JOYSTICK1_SW_PIN, INPUT_PULLUP);
  
  pinMode(JOYSTICK2_X_PIN, INPUT);
  pinMode(JOYSTICK2_Y_PIN, INPUT);
  pinMode(JOYSTICK2_SW_PIN, INPUT_PULLUP);
  
  // Test joysticks
  Serial.println("Testing joysticks...");
  delay(1000);
  
  // Test joystick 1
  Serial.print("Joystick 1 X: ");
  Serial.println(analogRead(JOYSTICK1_X_PIN));
  Serial.print("Joystick 1 Y: ");
  Serial.println(analogRead(JOYSTICK1_Y_PIN));
  Serial.print("Joystick 1 SW: ");
  Serial.println(digitalRead(JOYSTICK1_SW_PIN));
  
  // Test joystick 2
  Serial.print("Joystick 2 X: ");
  Serial.println(analogRead(JOYSTICK2_X_PIN));
  Serial.print("Joystick 2 Y: ");
  Serial.println(analogRead(JOYSTICK2_Y_PIN));
  Serial.print("Joystick 2 SW: ");
  Serial.println(digitalRead(JOYSTICK2_SW_PIN));
  
  // Initialize display
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  
  // Welcome screen
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(20, 10);
  display.println("TANK BATTLE");
  display.setCursor(15, 25);
  display.println("Two player game");
  display.setCursor(10, 40);
  display.println("Press any button");
  display.setCursor(20, 50);
  display.println("to start");
  display.display();
  
  // Wait for button press
  while (digitalRead(JOYSTICK1_SW_PIN) == HIGH && digitalRead(JOYSTICK2_SW_PIN) == HIGH) {
    delay(50);
  }
  delay(300);  // Debounce
  
  // Create tasks
  xTaskCreate(
    gameTask,
    "GameTask",
    4096,
    NULL,
    1,
    &gameTaskHandle
  );
  
  xTaskCreate(
    inputTask,
    "InputTask",
    2048,
    NULL,
    2,
    &inputTaskHandle
  );
}

void loop() {
  vTaskDelay(1000 / portTICK_PERIOD_MS);
}

void initializeGame() {
  // Initialize tanks
  tanks[0].position = {30, 30};
  tanks[0].angle = 0;
  tanks[0].speed = 0;
  tanks[0].health = 100;
  tanks[0].lastShotTime = 0;
  tanks[0].isAlive = true;
  
  tanks[1].position = {SCREEN_WIDTH - 30, SCREEN_HEIGHT - 30};
  tanks[1].angle = M_PI;
  tanks[1].speed = 0;
  tanks[1].health = 100;
  tanks[1].lastShotTime = 0;
  tanks[1].isAlive = true;
  
  // Initialize bullets
  for (int i = 0; i < MAX_BULLETS; i++) {
    bullets[i].active = false;
  }
  
  // Initialize walls - create a simple map
  // Border walls
  walls[0] = {{0, 0}, 128, WALL_SIZE, true};  // Top
  walls[1] = {{0, SCREEN_HEIGHT - WALL_SIZE}, 128, WALL_SIZE, true};  // Bottom
  walls[2] = {{0, 0}, WALL_SIZE, 64, true};  // Left
  walls[3] = {{SCREEN_WIDTH - WALL_SIZE, 0}, WALL_SIZE, 64, true};  // Right
  
  // Interior walls
  walls[4] = {{30, 20}, 20, WALL_SIZE, true};
  walls[5] = {{80, 30}, WALL_SIZE, 25, true};
  walls[6] = {{20, 45}, 30, WALL_SIZE, true};
  walls[7] = {{50, 50}, 20, WALL_SIZE, true};
  walls[8] = {{100, 10}, WALL_SIZE, 20, true};
  
  // Initialize remaining walls as inactive
  for (int i = 9; i < MAX_WALLS; i++) {
    walls[i].active = false;
  }
  
  gameOver = false;
  winner = -1;
}

void readJoysticks() {
  // Read first joystick (tank 1)
  if (tanks[0].isAlive) {
    int x1 = analogRead(JOYSTICK1_X_PIN);
    int y1 = analogRead(JOYSTICK1_Y_PIN);
    
    // Invert readings to fix direction
    int dx1 = -(x1 - JOYSTICK_CENTER);
    int dy1 = -(y1 - JOYSTICK_CENTER);
    
    float magnitude = sqrt(dx1*dx1 + dy1*dy1);
    
    if (magnitude > JOYSTICK_DEADZONE) {
      // Update tank rotation based on joystick angle
      tanks[0].angle = atan2(dy1, dx1);
      
      // Set speed based on joystick displacement
      tanks[0].speed = map(constrain(magnitude, JOYSTICK_DEADZONE, JOYSTICK_MAX_RANGE), 
                        JOYSTICK_DEADZONE, JOYSTICK_MAX_RANGE, 
                        0, TANK_SPEED * 100) / 100.0;
    } else {
      tanks[0].speed = 0;
    }
    
    // Check fire button
    if (digitalRead(JOYSTICK1_SW_PIN) == LOW) {
      fireBullet(0);
    }
  }
  
  // Read second joystick (tank 2)
  if (tanks[1].isAlive) {
    int x2 = analogRead(JOYSTICK2_X_PIN);
    int y2 = analogRead(JOYSTICK2_Y_PIN);
    
    // Invert readings to fix direction
    int dx2 = -(x2 - JOYSTICK_CENTER);
    int dy2 = -(y2 - JOYSTICK_CENTER);
    
    float magnitude = sqrt(dx2*dx2 + dy2*dy2);
    
    if (magnitude > JOYSTICK_DEADZONE) {
      // Update tank rotation based on joystick angle
      tanks[1].angle = atan2(dy2, dx2);
      
      // Set speed based on joystick displacement
      tanks[1].speed = map(constrain(magnitude, JOYSTICK_DEADZONE, JOYSTICK_MAX_RANGE), 
                        JOYSTICK_DEADZONE, JOYSTICK_MAX_RANGE, 
                        0, TANK_SPEED * 100) / 100.0;
    } else {
      tanks[1].speed = 0;
    }
    
    // Check fire button
    if (digitalRead(JOYSTICK2_SW_PIN) == LOW) {
      fireBullet(1);
    }
  }
}

void updateGame() {
  unsigned long currentTime = millis();
  
  // Update tanks
  for (int i = 0; i < 2; i++) {
    if (tanks[i].isAlive) {
      // Calculate new position based on angle and speed
      float newX = tanks[i].position.x + cos(tanks[i].angle) * tanks[i].speed;
      float newY = tanks[i].position.y + sin(tanks[i].angle) * tanks[i].speed;
      
      // Check wall collisions before moving
      bool collision = false;
      for (int w = 0; w < MAX_WALLS; w++) {
        if (walls[w].active) {
          if (checkCollision({newX, newY}, TANK_SIZE, walls[w])) {
            collision = true;
            break;
          }
        }
      }
      
      if (!collision) {
        tanks[i].position.x = newX;
        tanks[i].position.y = newY;
      }
      
      // Keep tanks on screen
      tanks[i].position.x = constrain(tanks[i].position.x, TANK_SIZE, SCREEN_WIDTH - TANK_SIZE);
      tanks[i].position.y = constrain(tanks[i].position.y, TANK_SIZE, SCREEN_HEIGHT - TANK_SIZE);
      
      // Update tank LED indicators
      if (i == 0) {
        digitalWrite(RED_LED, tanks[0].speed > 0 ? HIGH : LOW);
      } else {
        digitalWrite(BLUE_LED, tanks[1].speed > 0 ? HIGH : LOW);
      }
    }
  }
  
  // Update bullets
  for (int i = 0; i < MAX_BULLETS; i++) {
    if (bullets[i].active) {
      // Check if bullet has expired
      if (currentTime - bullets[i].creationTime > BULLET_LIFETIME) {
        bullets[i].active = false;
        continue;
      }
      
      // Update bullet position
      float newX = bullets[i].position.x + bullets[i].velocity.x;
      float newY = bullets[i].position.y + bullets[i].velocity.y;
      bool collision = false;
      
      // Check collision with walls
      for (int w = 0; w < MAX_WALLS; w++) {
        if (walls[w].active) {
          if (checkPointInRect(newX, newY, 
                              walls[w].position.x, walls[w].position.y,
                              walls[w].width, walls[w].height)) {
            // Determine which side the bullet hit and bounce
            bool hitHorizontal = false;
            
            // Simplified bounce detection
            float bulletLeft = bullets[i].position.x - BULLET_SIZE;
            float bulletRight = bullets[i].position.x + BULLET_SIZE;
            float bulletTop = bullets[i].position.y - BULLET_SIZE;
            float bulletBottom = bullets[i].position.y + BULLET_SIZE;
            
            float wallLeft = walls[w].position.x;
            float wallRight = walls[w].position.x + walls[w].width;
            float wallTop = walls[w].position.y;
            float wallBottom = walls[w].position.y + walls[w].height;
            
            // Determine if horizontal or vertical collision
            if ((bulletRight >= wallLeft && bullets[i].position.x < wallLeft) || 
                (bulletLeft <= wallRight && bullets[i].position.x > wallRight)) {
              bullets[i].velocity.x = -bullets[i].velocity.x;
              hitHorizontal = true;
            } else if ((bulletBottom >= wallTop && bullets[i].position.y < wallTop) || 
                      (bulletTop <= wallBottom && bullets[i].position.y > wallBottom)) {
              bullets[i].velocity.y = -bullets[i].velocity.y;
              hitHorizontal = false;
            }
            
            bullets[i].bounceCount++;
            collision = true;
            
            // Limit bounce count
            if (bullets[i].bounceCount >= BULLET_BOUNCE_MAX) {
              bullets[i].active = false;
            }
            
            break;
          }
        }
      }
      
      // Check collision with tanks
      for (int t = 0; t < 2; t++) {
        if (tanks[t].isAlive) {
          float distance = sqrt(pow(newX - tanks[t].position.x, 2) + 
                              pow(newY - tanks[t].position.y, 2));
                              
          if (distance < TANK_SIZE + BULLET_SIZE) {
            // Bullet hit tank
            tanks[t].health -= 25;  // Decrease health
            bullets[i].active = false;
            collision = true;
            
            if (tanks[t].health <= 0) {
              tanks[t].isAlive = false;
              
              // Check game over
              if (!tanks[0].isAlive && !tanks[1].isAlive) {
                gameOver = true;
                winner = -1;  // Draw
              } else if (!tanks[0].isAlive) {
                gameOver = true;
                winner = 1;  // Player 2 wins
              } else if (!tanks[1].isAlive) {
                gameOver = true;
                winner = 0;  // Player 1 wins
              }
            }
            
            break;
          }
        }
      }
      
      if (!collision) {
        bullets[i].position.x = newX;
        bullets[i].position.y = newY;
      }
      
      // Check if bullet is off-screen
      if (bullets[i].position.x < 0 || bullets[i].position.x > SCREEN_WIDTH ||
          bullets[i].position.y < 0 || bullets[i].position.y > SCREEN_HEIGHT) {
        bullets[i].active = false;
      }
    }
  }
  
  // Handle map movement if both joysticks are pressed
  if (digitalRead(JOYSTICK1_SW_PIN) == LOW && digitalRead(JOYSTICK2_SW_PIN) == LOW) {
    // Read first joystick for map movement
    int x1 = analogRead(JOYSTICK1_X_PIN);
    int y1 = analogRead(JOYSTICK1_Y_PIN);
    
    int dx1 = -(x1 - JOYSTICK_CENTER);
    int dy1 = -(y1 - JOYSTICK_CENTER);
    
    if (abs(dx1) > JOYSTICK_DEADZONE) {
      mapOffset.x += dx1 / 2000.0; // Adjust sensitivity as needed
    }
    
    if (abs(dy1) > JOYSTICK_DEADZONE) {
      mapOffset.y += dy1 / 2000.0; // Adjust sensitivity as needed
    }
  }
  
  // Handle game restart if game over and both buttons pressed
  if (gameOver && digitalRead(JOYSTICK1_SW_PIN) == LOW && digitalRead(JOYSTICK2_SW_PIN) == LOW) {
    initializeGame();
  }
}

void renderGame() {
  display.clearDisplay();
  
  // Draw walls
  for (int i = 0; i < MAX_WALLS; i++) {
    if (walls[i].active) {
      display.fillRect(
        walls[i].position.x + mapOffset.x, 
        walls[i].position.y + mapOffset.y, 
        walls[i].width, 
        walls[i].height, 
        SSD1306_WHITE
      );
    }
  }
  
  for (int i = 0; i < MAX_BULLETS; i++) {
    if (bullets[i].active) {
      float xPos = bullets[i].position.x + mapOffset.x;
      float yPos = bullets[i].position.y + mapOffset.y;
      
      // Calculate bullet angle from velocity
      float bulletAngle = atan2(bullets[i].velocity.y, bullets[i].velocity.x);
      
      // Draw larger bullet with motion trail
      display.fillCircle(xPos, yPos, BULLET_SIZE + 1, SSD1306_WHITE);
      
      // Draw motion trail
      float trailX1 = xPos - cos(bulletAngle) * (BULLET_SIZE + 2);
      float trailY1 = yPos - sin(bulletAngle) * (BULLET_SIZE + 2);
      float trailX2 = xPos - cos(bulletAngle) * (BULLET_SIZE + 4);
      float trailY2 = yPos - sin(bulletAngle) * (BULLET_SIZE + 4);
      
      display.drawPixel(trailX1, trailY1, SSD1306_WHITE);
      display.drawPixel(trailX2, trailY2, SSD1306_WHITE);
      
      // Show owner indicator (optional)
      if (bullets[i].ownerId == 0) {
        display.drawPixel(xPos + 2, yPos - 2, SSD1306_BLACK);
      } else {
        display.drawPixel(xPos - 2, yPos - 2, SSD1306_BLACK);
      }
    }
  }
  
  // Draw tanks
  for (int i = 0; i < 2; i++) {
    if (tanks[i].isAlive) {
      // Draw tank body
      display.fillCircle(
        tanks[i].position.x + mapOffset.x, 
        tanks[i].position.y + mapOffset.y, 
        TANK_SIZE, 
        SSD1306_WHITE
      );
      
      // Draw cannon
      float cannonEndX = tanks[i].position.x + cos(tanks[i].angle) * (TANK_SIZE + 3);
      float cannonEndY = tanks[i].position.y + sin(tanks[i].angle) * (TANK_SIZE + 3);
      
      display.drawLine(
        tanks[i].position.x + mapOffset.x, 
        tanks[i].position.y + mapOffset.y, 
        cannonEndX + mapOffset.x, 
        cannonEndY + mapOffset.y, 
        SSD1306_WHITE
      );
      
      // Draw health bar
      int barWidth = 25;
      int barHeight = 3;
      int healthWidth = map(tanks[i].health, 0, 100, 0, barWidth);
      
      int barX = i == 0 ? 5 : SCREEN_WIDTH - 5 - barWidth;
      int barY = 5;
      
      display.drawRect(barX, barY, barWidth, barHeight, SSD1306_WHITE);
      display.fillRect(barX, barY, healthWidth, barHeight, SSD1306_WHITE);
    }
  }
  
  // Draw game over screen
  if (gameOver) {
    static bool buttonsReleased = true;
    
    // Check if any button is pressed
    if (digitalRead(JOYSTICK1_SW_PIN) == LOW || digitalRead(JOYSTICK2_SW_PIN) == LOW) {
      if (buttonsReleased) {  // Only restart if buttons were previously released
        initializeGame();
        buttonsReleased = false;
        
        // Visual feedback for restart
        digitalWrite(RED_LED, HIGH);
        digitalWrite(BLUE_LED, HIGH);
        delay(200);
        digitalWrite(RED_LED, LOW);
        digitalWrite(BLUE_LED, LOW);
      }
    } else {
      buttonsReleased = true;  // Buttons are released, ready for next press
    }
  }
  
  display.display();
}

void fireBullet(int tankId) {
  unsigned long currentTime = millis();
  
  // Check reload time
  if (currentTime - tanks[tankId].lastShotTime < RELOAD_TIME) {
    return;  // Not ready to fire yet
  }
  
  tanks[tankId].lastShotTime = currentTime;
  
  // Find empty bullet slot
  int bulletIndex = -1;
  for (int i = 0; i < MAX_BULLETS; i++) {
    if (!bullets[i].active) {
      bulletIndex = i;
      break;
    }
  }
  
  // Check if we found an available bullet slot
  if (bulletIndex == -1) {
    return;  // No available bullet slots
  }
  
  // Create new bullet - POSITION IT AT THE END OF THE CANNON, NOT AT TANK CENTER
  float cannonLength = TANK_SIZE + 3;
  bullets[bulletIndex].position = {
    tanks[tankId].position.x + cos(tanks[tankId].angle) * cannonLength,
    tanks[tankId].position.y + sin(tanks[tankId].angle) * cannonLength
  };
  
  bullets[bulletIndex].velocity = {
    (float)(cos(tanks[tankId].angle) * BULLET_SPEED),
    (float)(sin(tanks[tankId].angle) * BULLET_SPEED)
  };
  bullets[bulletIndex].creationTime = currentTime;
  bullets[bulletIndex].ownerId = tankId;
  bullets[bulletIndex].active = true;
  bullets[bulletIndex].bounceCount = 0;
  
  // Flash LED for firing
  if (tankId == 0) {
    digitalWrite(RED_LED, HIGH);
    delay(50);
    digitalWrite(RED_LED, tanks[0].speed > 0 ? HIGH : LOW);
  } else {
    digitalWrite(BLUE_LED, HIGH);
    delay(50);
    digitalWrite(BLUE_LED, tanks[1].speed > 0 ? HIGH : LOW);
  }
}

bool checkCollision(Vector2 pos, float radius, Wall wall) {
  // Check if the tank (circle) collides with wall (rectangle)
  float testX = pos.x;
  float testY = pos.y;
  
  // Find closest edge
  if (pos.x < wall.position.x) {
    testX = wall.position.x;
  } else if (pos.x > wall.position.x + wall.width) {
    testX = wall.position.x + wall.width;
  }
  
  if (pos.y < wall.position.y) {
    testY = wall.position.y;
  } else if (pos.y > wall.position.y + wall.height) {
    testY = wall.position.y + wall.height;
  }
  
  // Calculate distance
  float distX = pos.x - testX;
  float distY = pos.y - testY;
  float distance = sqrt(distX*distX + distY*distY);
  
  return distance <= radius;
}

bool checkPointInRect(float x, float y, float rectX, float rectY, float rectW, float rectH) {
  return (x >= rectX && x <= rectX + rectW && y >= rectY && y <= rectY + rectH);
}